name: Nifty 50 EMA Alerts Cron

on:
  schedule:
    # Run every 5 minutes during market hours (9:15 AM to 3:30 PM IST)
    # This is in UTC, so IST 9:15 AM = UTC 3:45 AM
    - cron: '*/5 4-10 * * 1-5'  # Monday to Friday, 4:00 AM to 10:00 AM UTC (9:30 AM to 3:30 PM IST)
  workflow_dispatch:  # Allow manual triggering

jobs:
  check-alerts:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create config file
      run: |
        cat > config.json << EOF
        {
          "upstox": {
            "client_id": "${{ secrets.UPSTOX_API_KEY }}",
            "client_secret": "${{ secrets.UPSTOX_API_SECRET }}",
            "redirect_uri": "https://nifty50-ema-alerts.netlify.app/.netlify/functions/auth"
          },
          "telegram": {
            "bot_token": "${{ secrets.TELEGRAM_BOT_TOKEN }}",
            "chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}"
          }
        }
        EOF
        
    - name: Create token file
      run: |
        cat > upstox_refresh.json << EOF
        {
          "access_token": "${{ secrets.UPSTOX_ACCESS_TOKEN }}"
        }
        EOF
        
    - name: Run EMA Alert Check with Error Handling
      run: |
        python -c "
        import sys
        import json
        from datetime import datetime
        
        # Add current directory to path
        sys.path.append('.')
        
        try:
            from upstox_client import UpstoxClient
            from telegram_bot import TelegramBot
            
            print('🔍 Starting EMA alert check at', datetime.now())
            
            # Initialize clients
            upstox = UpstoxClient()
            bot = TelegramBot()
            
            # Get EMA data
            result = upstox.get_nifty50_with_ema(5)
            
            if result:
                current_price = result['close']
                ema_value = result['ema']
                
                print(f'📊 Current price: ₹{current_price:,.2f}')
                print(f'📈 EMA(5): ₹{ema_value:,.2f}')
                
                # Check for bullish signal
                if current_price > ema_value:
                    # Send bullish alert
                    message = f'''🚀 <b>BULLISH EMA SIGNAL</b>
        
        📊 <b>Nifty 50:</b> ₹{current_price:,.2f}
        📈 <b>EMA(5):</b> ₹{ema_value:,.2f}
        🔥 <b>Signal:</b> BULLISH
        ⏰ <b>Time:</b> {result[\"datetime\"]}
        
        Price crossed above EMA - Bullish momentum detected!'''
                    
                    success = bot.send_message(message)
                    if success:
                        print('✅ Bullish alert sent successfully')
                    else:
                        print('⚠️ Failed to send Telegram alert')
                else:
                    print(f'💤 No bullish signal: ₹{current_price:,.2f} <= EMA ₹{ema_value:,.2f}')
            else:
                print('⚠️ No data available for EMA calculation')
                
        except Exception as e:
            print(f'❌ Error in alert check: {e}')
            
            # Send error notification to Telegram if possible
            try:
                from telegram_bot import TelegramBot
                bot = TelegramBot()
                
                error_msg = f'''⚠️ <b>ALERT SYSTEM ERROR</b>
        
        🕐 <b>Time:</b> {datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")}
        ❌ <b>Error:</b> {str(e)}
        
        <b>Possible Solutions:</b>
        • Token may have expired (need daily refresh)
        • Market may be closed
        • Network connectivity issue
        
        System will retry in 5 minutes.'''
                
                bot.send_message(error_msg)
                print('📱 Error notification sent to Telegram')
            except Exception as telegram_error:
                print(f'❌ Could not send error notification: {telegram_error}')
            
            # Don't fail the workflow completely - just log the error
            sys.exit(0)  # Exit with success to avoid workflow failure notifications
        "
